#!/bin/bash   <- first line, special comment specifies interpretter to run script
# See:  D:\Dev\pycode\cheat_sheets\bash_cheatsheet.pdf
#Comments  # Can be after command as well
#Variables
myvar=value  # (no white space, python prefers whitespace)
unset myvar  # forget variable
echo $myvar  # works if whitespace around var
echo ${myvar}ing  # works if no whitespace around var, will always work.
myvar=$(pwd) # command output is asigned to variable => command substitue expansion
# Unassigned variable is blank.

#Command Line accelerators
#Ctrl+A = beginning of line
#Ctrl+E = end of line
#Ctrl+U = clear to beginning of line
#Ctrl+K = clear to end of line
#Ctrl+C = break; cancel
#Ctrl+R = Search
#Ctrl+L = Clear the screen
#Prefix with # to delay execution

important_time=$(date)
$ echo $important_time
Mon Mar 22 15:52:17 EDT 2021
$ dd="date"			 # variable can hold command
$ $dd            # ==> Mon Mar 22 15:53:29 EDT 2021
$ ${dd}					 # ==> Mon Mar 22 15:58:14 EDT 2021

# read input into a variable
read varname
read -p "prompt string: " varname    #
read -sp "prompt string: " varname   #secret / hide input

$PATH       # show current path
PATH="<mypath_adder>:${PATH}"
export $PATH

# Arithmetic expressions; must use $((  )) around computations
# strings will not have a value => will be zero
num1=10
num2=20
echo " SUM $(( num1 + num2 ))"

# if statement
if [ 3 -eq 3  ]; then						# Use Semicolon if then placed on same line
  echo "yes, they are the same"
fi

# if statement
if [ 3 -eq 3  ] 
then
  echo "yes, they are the same"
fi


# if statement  # must terminate with ; if then appended after if statemment  if [ ]; then
read -p "Enter number: " num
if [ $num -eq 3 ]; then       # Note, must have whitespace after the and before [ ]
  echo "num = $num"
elif [ $num -gt 3 ]; then
  echo "num > 3"
elif [ $num -lt 3 ]; then
  echo "num < 3"
else
  echo "else you got here."
fi

# Equality Operators:
-eq = ; -ne != ; -gt > ; -lt < ; -ge >= ; -le <= 

# Conditions
-o OR ; -a AND ; Logial Tests:  && AND; || OR; 

read -p "Enter number: " num
if [ $num -gt 0 -a $num -lt 100 ]; then       # Note, must have whitespace after the and before [ ]
  echo "num = $num"
fi  

if  [ $age -gt 26 ] && [ $age -lt 64 ]; then
        echo "you are between 26 and 64"
        exit
fi


# string compare
== equal;   !=  Not equal

# Empty string test:
read -p "Enter string: " str
if [ -z $str ]; then
  echo "string is empty"
fi

# Better to quote string, to make sure entire string is checked.
read -p "Enter string: " str
if [ -z "$str" ]; then
  echo "string is empty"
fi

#if on files
if [ -e $myfile ]; then

if [ ! -e $myfile ]; then

! not; -e exists; -d directory; -r readable; -w writeable; -x executable; -s Not Empty; -f reqular file (not dir or not exist);  

# Loops
for i in {1,2,3,4}
do
  echo "$i"
done

for i in {1..4}
do
  echo "$i 
done

for i in {1,"dog",-5,"something"}
do
  echo "$i 
done

#Break
for i in {1,"dog",-5,"something"}
do
  if [ $i == "dog" ]; then
    break
  fi
  echo "$i 
done

for i in ./*				# ; at end of for or while line is not required.
do   
  echo "name of file is:  ${i} "
done

# Common Mistakes
# Putting whitespace around variable assignments.   myvar=value
# Not using whitespace around conditional brackets  [_  _]  
# Not using quotes around strings when comparing; whitespace could expand into multi strings
# Not using ${var} notation; $var might concatenate into unknown var
# Using vars in single quotes; they will not get interpretted:  ' $a ' will not interpret; use " $a " 

# While Loops

while [ $num -le 15 ]
do 
  echo "num is $num"
  num=$(( num +4 ))				# Careful, no whitespace around = 
done

# Case

echo "enter a choice"
read choice
case $choice in
  "hello")
    echo "You typed hello "
    ;;
  *."txt") 
  	echo " You entered a txt file."
  	;;
  1)
  	echo " You entered a 1"
  	;;
  2 | 3)								# Or
  	echo " You entered 2 or 3"
  	;;  	
  1[2-8])
  	echo " You entered a value between 12-18"
  	;;
  [a-z])
  	echo " You entered a lower case char"
  	;;
  [A-Z])
  	echo " You entered a UPPER case char"
  	;;
  *) echo " None of the above."
esac   

# Exit status
echo $?      # 0 = success, !0 failure

# Functions
mydate(){
  echo "today is: "
  date
  echo "Have a great day."
}
mydate

hello2() {						# Note, Dont have to declare variaibles
  echo "hello $1 "
  echo "hello also to $2 "
}
hello2 "Mark" "Hamel"

# More For Loop Examples:

files=(*.txt) # put the list of matching files in an array
for file in "${files[@]}"; do # loop through the array
  echo "file=$file"
done

#!/bin/bash
# Read a string with spaces using for loop
for value in I like programming
do
    echo $value
done

# Define a string variable with a value
StringVal="Welcome to linuxhint"

# Iterate the string variable using for loop
for val in $StringVal; do
    echo $val
done

#How to retrieve the first word of the output of a command in bash?
#String to array assignment; ref: https://stackoverflow.com/questions/2440414/how-to-retrieve-the-first-word-of-the-output-of-a-command-in-bash
array=( $string ) # do not use quotes in order to allow word expansion
echo ${array[0]} # You can retrieve any word. Index runs from 0 to length-1
#Also, you can directly read arrays in a pipe-line:
echo "word1 word2" | while read -a array; do echo "${array[0]}" ; done
#Awk is a good option if you have to deal with trailing whitespace because it'll take care of it for you:
echo "   word1  word2 " | awk '{print $1;}' # Prints "word1"
#Cut won't take care of this though:
echo "  word1  word2 " | cut -f 1 -d " " # Prints nothing/whitespace
#Bash itself can do the job
$ string="word1 word2"
$ set -- $string
$ echo $1
word1
$ echo $2
word2
echo "word1 word2" | while read -a array; do echo "${array[0]}" ; done

# Declare an array of string with type
declare -a StringArray=("Linux Mint" "Fedora" "Red Hat Linux" "Ubuntu" "Debian" )
 
# Iterate the string array using for loop
for val in ${StringArray[@]}; do
   echo $val
done

# Declare a string array with type
declare -a StringArray=("Windows XP" "Windows 10" "Windows ME" "Windows 8.1"
"Windows Server 2016" )
 
# Read the array values with space
for val in "${StringArray[@]}"; do
  echo $val
done

#Declare a string array
LanguageArray=("PHP"  "Java"  "C#"  "C++"  "VB.Net"  "Python"  "Perl")
# Print array values in  lines
echo "Print every element in new line"
for val1 in ${LanguageArray[*]}; do
     echo $val1
done
echo ""
# Print array values in one line
echo "Print all elements in a single line"
for val2 in "${LanguageArray[*]}"; do
    echo $val2
done
echo ""


#!/bin/bash
DataList=" HTML5, CCS3, BootStrap, JQuery "
Field_Separator=$IFS
# set comma as internal field separator for the string list
IFS=,
for val in $DataList;
do
echo $val
done
IFS=$Field_Separator

find . -type d
find . -type f

basename ./folder/myfile.txt  ==> myfile.txt
# $ basename /home/lewellyn/test2.sh
# test2.sh

# Single Liners:
$ if [ 5 -gt 3 ]; then echo "hi"; sleep 3; fi
$ for i in {1..3}; do echo $i; done
$ while [ 1 -gt 3 ]; do echo "hi"; sleep 3; done
$ for i in *; do echo $i; done			# List all files
$ for i in *.sh; do echo $i; done
$ for i in $(find . -type f); do echo $i; done
$ for i in $(find . -type f); do count=$(( count+1 )); echo "${count}. $i"; done


# Linux Commands Often used:
# Remove Header line:  tail -n +2
$ ls -lrt | tail -n +2

# use awk to print a column:
$ ls -lrt | tail -n +2 | awk '{print $9}'

# AWK
awk '{print }' file   			# Print entire contents
awk '{print $0}' file   		# Print entire contents
awk '{print $1}' file			# Print 1st column (starts at 1)
awk '{print $1 $2}' file		# Columns 1 and 2 concatenated
awk '{print $1,$2}' file		# Columns 1 and 2 with space between them
awk '{print $NF}' file			# Last column; NF number of fields?
awk '{print $(NF-1)}' file	# 2nd to Last column; last column - 1
awk 'NR==2 {print $(NF-1)}' file		# Row 2
awk 'NR==2,NR==5 {print $(NF-1)}' file	# Row 2 through 5
awk 'NR==2;NR==5 {print $(NF-1)}' file	# Row 2 and 5
# for different delemiter
awk -F "," '{print $1}' file		# Print 1st column from CSV file

# AWK searching, matching, functions
awk '/searchstr/ {print } file
awk '/searchstr|str2/ {print } file   # multi search
awk '$2~/searchstr|str2/ {print } file   # multi search in 2nd column
awk '$1==$3  {print } file   # rows where columns match
awk '  {print $1,length($1)} file   # shows length of field.

# SED

# TR

# TEE

# FIND

# List unique images
docker images | tail -n +2 | awk '{print $1}' | uniq | wc -l
# Remove container images
for i in $(docker ps -a | tail -n +2 | awk '{print $1}'); do docker rm $i; done
#Remove Images
for i in $(docker images | tail -n +2 | awk '{print $1":"$2}'); do docker rmi $i; done

# Localhost IP = 127.0.0.1
