https://docs.docker.com/

# Check Linux release
cat /etc/*release*

# Install Docker, scroll to bottom and use convenience script:
https://docs.docker.com/engine/install/centos/
https://docs.docker.com/engine/install/ubuntu/
 curl -fsSL https://get.docker.com -o get-docker.sh
 sudo sh get-docker.sh

sudo docker version

# Run a test docker image
https://hub.docker.com/

#image: whalesay
sudo docker run docker/whalesay cowsay Hello-World!

#Docker Commands
docker run <image>  # will pull image from dockerhub if not existing
docker ps   				# Running containers
docker ps -a 				# List running and previously stopped/exited containers

docker stop [ <container> or <container ID prefix> ]
docker ps -a 
docker rm <container>
docker ps -a 

docker images
docker image ls
docker rmi <container>   		# Remove image; must have no running images

docker pull <image>					# download image

docker run ubuntu						# ubuntu runs bash, which will exit after running.
docker run ubuntu sleep 5

docker exec <container> <command>	
docker run <image>          # runs in foreground
docker run -d <image>				# runs image in background (detached)
docker attach (container ID - enough chars to be uniq)

# CLI
# Poor mans Linux VM 				# Need to also setup home directory volume!!!
docker run centos		
docker run -it centos bash  # Interactive, starts me in bash images.
  cat /etc/*release*

docker run -d centos sleep 20   # Run docker image in background (detached)
docker ps
docker ps -a 
docker ps -a --no-trunc				# Show long names

# List unique images
docker images | tail -n +2 | awk '{print $1}' | uniq | wc -l
# Remove container images
for i in $(docker ps -a | tail -n +2 | awk '{print $1}'); do docker rm $i; done
#Remove Images
for i in $(docker images | tail -n +2 | awk '{print $1":"$2}'); do docker rmi $i; done

# Execute command on containers
docker exec <container> <command>
docker exec -it <container> bash  	# bash interpretter
docker exec -it <container> sh			# shell interpretter
docker exec -it <container> /bin/sh	-c command		# run command with shell interpretter
docker run image:tag				# default tag is: latest

#STDIN
docker run -it image        # interacts, with terminal

#Port Mapping
docker run -p <localhost_port>:<container_port> image

#Volume Mapping
docker run -v <localhost_path>:<container_mountpath> image
docker run --mount type=bind,source=<localhost_path>,target=<container_mountpath> image

#Inspect container  (like describe in k8s)
docker inspect container
docker inspect image

#Logs
docker logs container

#Environment Vars
docker run -d -e MYENVVAR=value --name myname image

#Docker internal IP (if don't map port for localhost)
docker inspect container | grep IPAddress		#Under Networks section

docker history image  		# shows how the image was built

#Link containter to another container
docker run -d --name=wordpress --link db:db -p 8085:80 wordpress
docker run -d --name=wordpress --link db:db -p 8085:80 wordpress

#Docker Compose Example:
#$ cat wordpress_deploy.yml
services:
  db:
    environment:
      POSTGRES_PASSWORD: mysecretpassword
    image: postgres
  wordpress:
    image: wordpress
    links:
    - db
    ports:
    - 8085:80
version: '3.0'

#Jenkins
docker run jenkins
docker container run --name jenkins-docker \
  --detach --restart unless-stopped \
  --privileged \
  --network jenkins --network-alias docker \ 
  --env DOCKER_TLS_CERTDIR="/certs" \
  --volume jenkins-docker-certs:/certs/client \
  --volume jenkins-data:/var/jenkins_home \
  docker:dind

#Splunk

$ cat Dockerfile 
FROM python:3.6

RUN pip install flask

COPY . /opt/

EXPOSE 8080

WORKDIR /opt

ENTRYPOINT ["python", "app.py"]

# Build the Docker image:
docker build .
docker build -t webapp-color .    # Add tag to build

#Find release info of image source
docker exec <container_ID_prefix or continanter_name> cat /etc/*release*

# PUSH
docker login
docker build -t yourid/image:tag .    # Add tag to build
docker push yourid/image:tag

#Docker Compose
vi docker-compose.yml			#Create in directory where you will run docker-compose
docker-compose up         #Expects docker-compose.yml file to be in local dir

docker info
docker history image			#shows how image was built
docker system df					#shows actual space consumption on disk
docker system df -v				#shows verbose actual space consumption on disk

docker network ls					#View docker networks
docker inspect <network_id or network_name>

#CIDR = (Classless Inter-Domain Routing) 
docker run --name alpine-2 --network=none alpine  #Attach container to no network
docker run --name alpine-2 --network=host alpine  #Attach container to host network
docker network create --driver bridge --subnet 182.18.0.1/24 --gateway 182.18.0.1 wp-mysql-network  #Create wp-mysql-network

13  docker network create --driver bridge --subnet 182.18.0.1/24 --gateway 182.18.0.1 wp-mysql-network
14  docker run -d -e MYSQL_ROOT_PASSWORD=db_pass123 --name mysql-db --network wp-mysql-network mysql:5.6
15  docker run --network=wp-mysql-network -e DB_Host=mysql-db -e DB_Password=db_pass123 -p 38080:8080 --name webapp --link mysql-db:mysql-db -d kodekloud/simple-webapp-mysql
16  docker inspect wp-mysql-network 

